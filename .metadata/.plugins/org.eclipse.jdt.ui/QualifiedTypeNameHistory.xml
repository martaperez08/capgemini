<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<qualifiedTypeNameHistroy>
    <fullyQualifiedTypeName name="java.util.regex.Pattern"/>
    <fullyQualifiedTypeName name="java.util.regex.Matcher"/>
    <fullyQualifiedTypeName name="com.example.ioc.Validador"/>
    <fullyQualifiedTypeName name="java.security.PublicKey"/>
    <fullyQualifiedTypeName name="org.junit.jupiter.api.Test"/>
    <fullyQualifiedTypeName name="com.example.ioc.ValidadorImpl"/>
    <fullyQualifiedTypeName name="org.springframework.context.annotation.Bean"/>
    <fullyQualifiedTypeName name="com.example.ioc.StringRepositoryMockImp"/>
    <fullyQualifiedTypeName name="org.junit.jupiter.api.Nested"/>
    <fullyQualifiedTypeName name="org.springframework.test.context.ContextConfiguration"/>
    <fullyQualifiedTypeName name="com.example.ioc.StringRepository"/>
    <fullyQualifiedTypeName name="org.springframework.boot.test.context.TestConfiguration"/>
    <fullyQualifiedTypeName name="org.springframework.jdbc.core.JdbcTemplate"/>
    <fullyQualifiedTypeName name="org.springframework.jdbc.core.RowMapper"/>
    <fullyQualifiedTypeName name="java.sql.ResultSet"/>
    <fullyQualifiedTypeName name="java.sql.SQLException"/>
    <fullyQualifiedTypeName name="com.gildedrose.Item"/>
    <fullyQualifiedTypeName name="java.lang.module.ModuleDescriptor.Builder"/>
    <fullyQualifiedTypeName name="java.util.ArrayList"/>
    <fullyQualifiedTypeName name="com.example.domains.entities.FilmActor"/>
    <fullyQualifiedTypeName name="javax.persistence.CascadeType"/>
    <fullyQualifiedTypeName name="jakarta.persistence.Entity"/>
    <fullyQualifiedTypeName name="org.springframework.data.jpa.repository.JpaRepository"/>
    <fullyQualifiedTypeName name="java.util.List"/>
    <fullyQualifiedTypeName name="org.springframework.data.repository.query.Param"/>
    <fullyQualifiedTypeName name="org.springframework.data.jpa.repository.Query"/>
    <fullyQualifiedTypeName name="org.springframework.data.jpa.repository.JpaSpecificationExecutor"/>
    <fullyQualifiedTypeName name="lombok.Builder"/>
    <fullyQualifiedTypeName name="org.hibernate.cache.spi.support.AbstractReadWriteAccess.Item"/>
    <fullyQualifiedTypeName name="lombok.experimental.var"/>
    <fullyQualifiedTypeName name="com.example.DemoApplication.Actor"/>
    <fullyQualifiedTypeName name="lombok.var"/>
    <fullyQualifiedTypeName name="jakarta.transaction.Transactional"/>
    <fullyQualifiedTypeName name="jakarta.persistence.Transient"/>
    <fullyQualifiedTypeName name="jakarta.validation.constraintvalidation.SupportedValidationTarget"/>
    <fullyQualifiedTypeName name="java.lang.Exception"/>
    <fullyQualifiedTypeName name="java.lang.String"/>
    <fullyQualifiedTypeName name="lombok.AllArgsConstructor"/>
    <fullyQualifiedTypeName name="com.example.domains.core.EntityBase"/>
    <fullyQualifiedTypeName name="org.springframework.data.domain.PageRequest"/>
    <fullyQualifiedTypeName name="org.springframework.data.domain.Sort"/>
    <fullyQualifiedTypeName name="java.lang.System"/>
    <fullyQualifiedTypeName name="lombok.Data"/>
    <fullyQualifiedTypeName name="lombok.Value"/>
    <fullyQualifiedTypeName name="com.example.domains.entities.dtos.ActorShort"/>
    <fullyQualifiedTypeName name="com.fasterxml.jackson.databind.ObjectMapper"/>
    <fullyQualifiedTypeName name="com.example.domains.entities.dtos.ActorDTO"/>
    <fullyQualifiedTypeName name="com.fasterxml.jackson.annotation.JsonProperty"/>
    <fullyQualifiedTypeName name="java.lang.Throwable"/>
    <fullyQualifiedTypeName name="com.example.domains.core.repositories.contracts.RepositoryWithProjections"/>
    <fullyQualifiedTypeName name="com.example.domains.core.services.contracts.ProjectionDomainService"/>
    <fullyQualifiedTypeName name="com.example.domains.entities.Actor"/>
    <fullyQualifiedTypeName name="java.lang.Integer"/>
    <fullyQualifiedTypeName name="org.springframework.stereotype.Service"/>
    <fullyQualifiedTypeName name="org.springframework.beans.factory.annotation.Autowired"/>
    <fullyQualifiedTypeName name="com.example.domains.contracts.repositories.ActorRepository"/>
    <fullyQualifiedTypeName name="com.example.exception.InvalidDataException"/>
    <fullyQualifiedTypeName name="com.example.exception.DuplicateKeyException"/>
    <fullyQualifiedTypeName name="com.example.exception.NotFoundException"/>
    <fullyQualifiedTypeName name="com.example.domains.contracts.service.ActorService"/>
</qualifiedTypeNameHistroy>
